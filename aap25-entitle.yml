---
# copy up the manifest containing the aap entitlement, accept the eula
# grabs the admin password from openshift secrets if onscp == yes
# requires the oc binary on the host to be logged into openshift with the proper permissions
# requires the entitlement manifest in files/manifest.zip
# generate manifest at https://access.redhat.com/management/subscription_allocations
# encrypt the manifest with: ansible-vault encrypt files/manifest.zip
# TODO: log in and grab admin password via k8s ansible modules
# USAGE: ansible-playbook --ask-vault-password -e 'tower_host=youraap.example.com tower_onosp=yes' ./aap25-entitle.yml
- hosts: localhost
  connection: local
  gather_facts: no
  # list of variables used in this playbook
  vars:
    tower_osp_project: "{{ tower.project }}"
    tower_osp_deployment_name: "{{ tower.deployment }}"
    tower_domain: "{{ tower.domain }}"
    tower_host: "{{ tower_osp_deployment_name }}-controller-{{ tower_osp_project }}.apps.{{ tower_domain }}"
    tower_user: "{{ tower.user }}"
    tower_pass: "{{ tower.pass }}"
    tower_onosp: "{{ tower.onosp }}"
    tower_osp_project: "{{ tower.project }}"
    tower_osp_deployment_name: "{{ tower.deployment }}"
  tasks:
  - name: grab the admin password if on openshift
    shell: |
      oc get secret {{ tower_osp_deployment_name }}-admin-password -n {{ tower_osp_project }} -o go-template --template="{{ '{{' }}.data.password|base64decode{{ '}}' }}"
    register: tower_pass
    when: (tower_onosp | bool) == True

  - name: set password to tower_pass variable if not running on osp
    set_fact:
      tower_pass: 
        stdout: "{{ tower_pass }}"
    when: (tower_onosp | bool) == False

  - name: Load vault decrypted manifest into variable
    slurp:
      src: "files/manifest.zip"
    register: manifest_file

  - name: Post manifest file and accept the EULA, retry every 10 secs for 5 mins
    uri:
      url: https://{{ tower_host }}/api/controller/v2/config/
      method: POST
      user: "{{ tower_user }}"
      password: "{{ tower_pass.stdout }}"
      body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
      body_format: json
      validate_certs: false
      force_basic_auth: true
    register: _result
    until: _result.status is defined and _result.status == 200
    retries: 30
    delay: 10

